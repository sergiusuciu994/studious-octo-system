<?php

namespace App\Tests;

use App\Actors\Fighter;
use App\ActorSkills\SkillList;
use PHPUnit\Framework\TestCase;

class FighterTest extends TestCase
{
    private Fighter $fighterOne;
    private Fighter $fighterTwo;

    public function setUp(): void
    {
        $skillList = new SkillList();
        $this->fighterOne = new Fighter('Fighter One', $skillList);
        $this->fighterTwo = new Fighter('Fighter Two', $skillList);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testThatAFighterWithHigherSpeedAttacksFirst(): void
    {
        $this->fighterOne->setSpeed(10);
        $this->fighterTwo->setSpeed(1);
        $this->assertTrue($this->fighterOne->attacksBefore($this->fighterTwo));
        $this->assertFalse($this->fighterTwo->attacksBefore($this->fighterOne));
    }

    public function testThatIfFightersHaveTheSameSpeedTheOneWithTheHigherLuckAttacksFirst(): void {
        $this->fighterOne->setSpeed(10);
        $this->fighterOne->setLuck(10);

        $this->fighterTwo->setSpeed(10);
        $this->fighterTwo->setLuck(1);

        $this->assertTrue($this->fighterOne->attacksBefore($this->fighterTwo));
        $this->assertFalse($this->fighterTwo->attacksBefore($this->fighterOne));
    }

    public function testThatDamageIsAttackerStrengthMinusDefenderDefence(): void {
        $attack = 100;
        $defence = 50;
        $health = 130;

        $this->fighterOne->setSpeed(1);
        $this->fighterOne->setStrength($attack);
        $this->fighterTwo->setDefence($defence);
        $this->fighterTwo->setHealth($health);


        $this->assertTrue($this->fighterOne->getStrength() === $attack);
        $this->assertTrue($this->fighterTwo->getDefence() === $defence);
        $this->assertTrue($this->fighterTwo->getHealth() === floatval($health));

        $this->fighterOne->attacks($this->fighterTwo);

        $this->assertEquals($health - ($attack - $defence), $this->fighterTwo->getHealth());
    }


    //... And so on
}
